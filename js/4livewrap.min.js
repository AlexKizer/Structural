function live(component){var algo=function(key,value){if(!value)return algo.get(key);algo.set(key,value)},fns=[],properties=[],open=true,last=0,vars={};$.extend(algo,S.ee());algo.paused=false;var std=S.simpleWrappable();std.live.end=function(){algo.fire("end",{})};std.live.set=function(key,value){vars[key]=value};std.live.get=function(key){return vars[key]};std.live.is=function(key,value){return vars[key]===value};std.live.log=function(str){console.log(str)};algo.wrap=function(item,wrapAlgo){console.log("item is "+item);if(typeof item.getSync==="undefined"||typeof item.getAsync==="undefined"){console.log("cannot livewrap item. no item.getSync() or item.getAsync()");return}for(var prop in item.getSync()){algo[prop]=function(property){var func=function(){if(!open)return;var args=Array.prototype.slice.call(arguments),ret=null;if(item.getSync()[property]!==null){ret=item.live[property].apply({},args)}var pushFn;if(item.getAsync().hasOwnProperty(property)&&item.getSync()[property]!==null){pushFn=function(fn){item.getSync()[property].apply(item.getSync(),args);item.getAsync()[property].apply(item.getAsync(),args.concat(fn))}}else if(item.getSync()[property]!==null){pushFn=function(fn){item.getSync()[property].apply(item.getSync(),args);fn()}}else if(item.getAsync().hasOwnProperty(property)){pushFn=function(fn){item.getAsync()[property].apply(item.getAsync(),args.concat(fn))}}else{console.log("method "+property.toString()+" was declared as async only (null), but no corresponding view method was found.");pushFn=false}if(pushFn)fns.push(pushFn);if(ret!==null)return ret};return func}(prop)}};algo.wrap(std);if(Array.isArray(component)){console.log("is array!");component.forEach(function(c){algo.wrap(c)})}else{algo.wrap(component)}algo.close=function(){open=false};algo.pause=function(){algo.paused=true};algo.play=function(){algo.paused=false;algo.exec()};algo.getIndex=function(){return last};algo.__getLength=function(){return fns.length};algo.exec=function(){console.log("exec: fns.length "+fns.length);if(open)return;var i=last;function doNext(){console.log("doNext");console.log(fns[i]);if(i>=fns.length){algo.fire("end",{});return}else if(algo.paused){return}algo.fire("update",{});last++;fns[i++].call({},function(){setTimeout(doNext,0)})}doNext()};return algo}